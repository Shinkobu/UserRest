Техническое задание (ТЗ) для тестового задания с использованием Rest API, Quarkus, JPA, Maven и PostgreSQL:

1. Описание проекта:
   - Разработка Rest API для управления сущностью "User" (Пользователь).

2. Требования к функциональности API:
   - Создание нового пользователя с указанием имени, электронной почты и пароля.
   - Получение информации о пользователе по его идентификатору.
   - Обновление информации о пользователе (имя, электронная почта, пароль).
   - Удаление пользователя по его идентификатору.
   - Получение списка всех пользователей.

3. Требования к технической реализации:
   - Использование Quarkus для создания приложения.
   - Использование JPA (Java Persistence API) для взаимодействия с базой данных.
   - Использование PostgreSQL в качестве базы данных.
   - Использование Java в качестве основного языка программирования.

4. Структура проекта:
   - Создание модели "User" с полями: идентификатор, имя, электронная почта, пароль.
   - Создание репозитория JPA для доступа к данным пользователей.
   - Создание контроллера Rest API для обработки запросов от клиента.
   - Конфигурация подключения к базе данных PostgreSQL.

5. Дополнительные требования:
   - Реализация контроллера и сервисов с использованием хороших практик проектирования и разделения ответственностей.
   - Обработка ошибок и исключений с использованием соответствующих HTTP-статусов и сообщений об ошибках.

6. Документация:
   - Добавление Swagger для автоматической генерации документации API.

7. Требования к комментариям и коду:
   - Код должен быть хорошо комментирован и иметь понятные названия переменных, методов и классов.
   - Использование хороших практик программирования и оформления кода.
8. Требования к валидации полей User:
    - Поле "имя" (name) должно содержать только буквы и быть не пустым.
    - Поле "электронная почта" (email) должно быть валидным адресом электронной почты.
    - Поле "пароль" (password) должно быть не меньше 8 символов и содержать хотя бы одну букву верхнего регистра, одну букву нижнего регистра и одну цифру.
9. Требования к обработке исключений при помощи Handler:
    - Создание обработчика исключений (ExceptionHandler), который будет обрабатывать различные исключения, возникающие в приложении.
    - Обработка исключения, если поле User не прошло валидацию (например, имя не содержит только буквы).
    - Обработка исключения, если поле User не прошло проверку на уникальность (например, электронная почта уже зарегистрирована в системе).
    - Возвращение соответствующего HTTP-статуса и сообщения об ошибке в формате JSON при возникновении исключений.

10. Дополнительные требования к комментариям и коду:
    - Валидация полей User должна быть реализована в отдельном классе для повторного использования и улучшения читаемости кода.
    - Использование аннотаций валидации (например, `@NotBlank`, `@Email`, `@Size`) для аннотирования полей User.
    - Обработчик исключений должен быть реализован в отдельном классе для централизованной обработки исключений в приложении.
    - Комментарии должны быть добавлены к важным блокам кода, объясняющим логику и особенности реализации.

11. Дополнительные бонусные задания (необязательно):
   - Добавление аутентификации и авторизации для защиты API.
   - Реализация пагинации и сортировки для списка пользователей.
   - Добавление возможности загрузки и хранения изображений для пользователей.

Ссылка на документацию по кваркусу:
https://quarkus.io
https://quarkus.io/guides/
